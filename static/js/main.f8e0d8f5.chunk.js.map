{"version":3,"sources":["Component/Todo/Item.module.css","logo.svg","Component/Header/index.jsx","Component/Todo/Button.jsx","Component/Todo/Input.jsx","Component/Todo/TodoInput.jsx","Component/Todo/TodoItem.js","Component/Todo/Todo.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","Header","className","src","logo","alt","target","rel","onClick","this","props","remove","Component","Button","children","Input","TodoInput","onSubmit","submit","id","type","onChange","e","handle","name","TodoItem","index","completeTodo","editTodo","data","text","complete","date","edit","console","log","Date","toLocaleString","weekday","year","month","day","Intl","DateTimeFormat","format","styles","toLocaleTimeString","hour12","htmlFor","removeTodo","role","aria-label","Todo","state","value","setState","Array","from","length","keys","condition","map","element","key","onKeyPress","done","App","todo","handleSubmit","preventDefault","undefined","textBaru","isEdited","childNodes","handleInput","removeStorage","localStorage","removeItem","splice","getAttribute","which","completeTask","JSON","parse","getItem","setItem","stringify","resetState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f8e0d8f5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todo--item\":\"Item_todo--item__VnGqG\",\"todo--item--button\":\"Item_todo--item--button__1KYf2\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport logo from '../../logo.svg';\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Hello <code>React</code>.\r\n        </p>\r\n        <p\r\n          className=\"App-link\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          onClick={this.props.remove}\r\n        >\r\n          Delete List\r\n        </p>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Button extends Component {\r\n  render() {\r\n\r\n    //<button onClick={removeTodo}><span role=\"img\" aria-label=\"delete\">üóëÔ∏è</span></button>\r\n    return (\r\n      <button {...this.props} >\r\n        {this.props.children || \"Button\"}\r\n      </button>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Input extends Component {\r\n  \r\n  render() {\r\n    return (\r\n      <input\r\n      {...this.props}\r\n     />\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Btn from './Button'\r\nimport Input from './Input'\r\nexport default class TodoInput extends Component {\r\n  \r\n  render() {\r\n     return (\r\n      <div className=\"wrap\">\r\n          <form className=\"input-wrap\" onSubmit={this.props.submit}>\r\n            {/* <input\r\n              type=\"text\"\r\n              id=\"input\"\r\n              name = \"todoitem\"\r\n              onChange={(e) => this.props.handle(e)}\r\n            /> */}\r\n            <Input id={\"input\"} type={\"text\"} onChange={(e) => this.props.handle(e)} name={this.props.name}></Input>\r\n            <Btn id={\"add\"}>Add</Btn>\r\n          </form>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Btn from \"./Button\" \r\nimport styles from './Item.module.css'\r\nexport default class TodoItem extends Component {\r\n  //index={index+1} data={element} click={this.props.complete(index)} delete={this.props.delete} edit={this.props.edit}\r\n  \r\n  render() {\r\n    const {index,completeTodo,editTodo} = this.props\r\n    const {text,complete,date,edit} = this.props.data\r\n    console.log(new Date(date).toLocaleString(\"id-ID\",{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }))\r\n    console.log( new Intl.DateTimeFormat('en', { year: 'numeric' }).format(new Date(date)))\r\n    // console.log(this.)\r\n    return (\r\n      <div className={styles[\"todo--item\"]}>\r\n        <div className={styles[\"todo--item--information\"]}>\r\n          <p className={styles[\"todo--item--information--date\"]}>{new Date(date).toLocaleTimeString(\"en-US\",{hour12 : false})}</p>\r\n          <label htmlFor=\"\" className={styles[\"todo--item--information--text\"]}>{text}</label>\r\n          <p className={styles[\"todo--item--information--date\"]}>{new Date(date).toLocaleString(\"id-ID\",{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</p>\r\n        </div>\r\n        <div className={styles[\"todo--item--button\"]}>\r\n          <Btn onClick={() => this.props.removeTodo(index)}>\r\n              <span role=\"img\" aria-label=\"delete\">üóëÔ∏è</span>\r\n            </Btn>\r\n            <Btn onClick={() => editTodo(index,text)}>\r\n              <span role=\"img\" aria-label=\"edit\">‚úèÔ∏è</span>\r\n            </Btn>\r\n            <Btn onClick={()=>completeTodo(index)}>\r\n              {complete ? <span role=\"img\" aria-label=\"uncomplete\">‚ùå</span> : <span role=\"img\" aria-label=\"complete\">‚úîÔ∏è</span>}\r\n            </Btn>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport TodoInput from \"./TodoInput\";\r\nimport Input from \"./Input\";\r\nimport TodoItem from \"./TodoItem\";\r\nexport default class Todo extends Component {\r\n  state = {\r\n    value : []\r\n  };\r\n  componentDidMount(){\r\n    this.setState({value : Array.from(Array(this.props.data.length).keys())})\r\n  }\r\n\r\n  edit(text, index) {\r\n    console.log(this.state);\r\n    console.log(this.props.data)\r\n    let data = this.state.value\r\n    data[index] = text\r\n    console.log(data)\r\n    this.setState({\r\n      value : data\r\n    });\r\n    console.log(this.state.value);\r\n    this.props.editTodo(null, index);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <TodoInput\r\n          submit={this.props.submit}\r\n          handle={this.props.handle}\r\n          condition={this.props.condition}\r\n          name=\"textBaru\"\r\n        />\r\n        {this.props.data.map((element, index) => (\r\n          <li id={index} key={index}>\r\n            {element.edit ? (\r\n              <Input\r\n                index={index}\r\n                name=\"textBaru\"\r\n                onChange={(e) =>{\r\n                  console.log(this.state.value)\r\n                  let data = this.state.value\r\n                  data[index] = e.target.value\r\n                  this.setState({\r\n                    value: data,\r\n                  })\r\n                }\r\n                }\r\n                onKeyPress={this.props.done}\r\n                value={this.state.value[index]}\r\n              />\r\n            ) : (\r\n              <TodoItem\r\n                index={index}\r\n                data={element}\r\n                completeTodo={this.props.complete}\r\n                removeTodo={this.props.remove}\r\n                editTodo={() => this.edit(element.text, index)}\r\n              />\r\n            )}\r\n            {/* {index + 1}. {element.text} | {element.complete.toString()} | {new Date(element.date).toString()}\r\n            <button onClick={this.props.remove}><span role=\"img\" aria-label=\"delete\">üóëÔ∏è</span></button>\r\n            <button onClick={this.props.editTodo}><span role=\"img\" aria-label=\"edit\">‚úèÔ∏è</span></button>\r\n            <button onClick={() => this.props.complete(index)}>{element.complete ? <span role=\"img\" aria-label=\"uncomplete\">‚ùå</span> : <span role=\"img\" aria-label=\"complete\">‚úîÔ∏è</span>}</button> */}\r\n          </li>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./Component/Header\";\r\nimport Todo from \"./Component/Todo/Todo\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    todo: [],\r\n  };\r\n  \r\n  componentDidMount(){\r\n    this.setState({\r\n      todo : JSON.parse(localStorage.getItem(\"data\")) || []\r\n    })\r\n  }\r\n  componentDidUpdate(){\r\n    localStorage.setItem(\"data\", JSON.stringify(this.state.todo))\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.textBaru !== undefined && this.state.textBaru !== \"\") {\r\n      if(this.state.edit) {\r\n        this.setState({    \r\n        })\r\n      }else {\r\n          this.setState(\r\n            {\r\n              todo: [\r\n                ...this.state.todo,\r\n                {\r\n                  text: this.state.textBaru,\r\n                  complete: false,\r\n                  edit : false,\r\n                  date: new Date(),\r\n                  isEdited : false,\r\n                },\r\n              ],\r\n              textBaru: \"\",\r\n            },\r\n          );\r\n          e.target.childNodes[0].value = \"\";\r\n        }\r\n      }\r\n  };\r\n\r\n  handleInput = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  removeStorage = () => {\r\n    this.setState({ todo: [] });\r\n    localStorage.removeItem(\"data\");\r\n  };\r\n\r\n  remove = (index) => {\r\n    console.log(index)\r\n    let data = this.state.todo;\r\n    data.splice(index, 1);\r\n    this.setState(\r\n      {\r\n        todo: data,\r\n      },\r\n    );\r\n  }\r\n\r\n  done = (e) => {\r\n    let index = e.target.getAttribute(\"index\")\r\n    if(e.which === 13){\r\n      console.log(e.target.value)\r\n      let data = this.state.todo;\r\n      data[index] = {\r\n        ...data[index],\r\n        edit : false,\r\n        text : e.target.value\r\n      }\r\n      this.setState({\r\n        todo : data,\r\n        textBaru : \"\"\r\n      })\r\n    }\r\n    // if (event.which == 13) { // event which 13 adalah tombol enter\r\n    //     this.data[index].text = event.target.value; // ini untuk mengisi key text pada  objek todo di index yang dituju\r\n    //     this.storage('todo', this.data, true); // menyimpan data pada local storage dengan fungsi storage \r\n    //     this.show(); // menampilkan ulang data\r\n    // }\r\n  }\r\n\r\n  editTodo = (text,index) => {\r\n    let data = this.state.todo;\r\n    data[index].edit = !data[index].edit\r\n    data[index].isEdited = !data[index].isEdited;\r\n    this.setState(\r\n      {\r\n        todo: data,\r\n      },\r\n\r\n    );\r\n    //() => {localStorage.setItem(\"data\", JSON.stringify(this.state.todo))\r\n    //console.log(this.state.todo)}\r\n  }\r\n\r\n  completeTask = (index) => {\r\n    console.log(index)\r\n    let data = this.state.todo;\r\n    data[index].complete = !data[index].complete\r\n    console.log(data)\r\n    this.setState(\r\n      {\r\n        todo: data,\r\n      },\r\n    );\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\" onClick={this.resetState}>\r\n        <Header remove={this.removeStorage} />\r\n        <Todo\r\n          data={this.state.todo}\r\n          submit={this.handleSubmit}\r\n          handle={this.handleInput}\r\n          remove={this.remove}\r\n          complete={this.completeTask}\r\n          done={this.done}\r\n          editTodo = {this.editTodo}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}