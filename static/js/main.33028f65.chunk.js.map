{"version":3,"sources":["logo.svg","Component/Header/index.jsx","Component/Todo/TodoInput.jsx","Component/Todo/Todo.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","Header","className","src","logo","alt","target","rel","onClick","this","props","remove","Component","TodoInput","onSubmit","submit","type","id","name","onChange","e","handle","Todo","data","map","element","index","key","text","App","handleSubmit","preventDefault","undefined","state","todoitem","setState","todo","complete","date","Date","localStorage","setItem","JSON","stringify","childNodes","value","handleInput","removeStorage","removeItem","parse","getItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uHAAAA,EAAOC,QAAU,IAA0B,kC,4NCGtBC,E,uKAEjB,OACE,4BAAQC,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,oCACQ,uCADR,KAGA,uBACEH,UAAU,WACVI,OAAO,SACPC,IAAI,sBACJC,QAASC,KAAKC,MAAMC,QAJtB,oB,GAR4BC,aCDfC,E,uKACT,IAAD,OACN,OACC,yBAAKX,UAAU,QACX,0BAAMA,UAAU,aAAaY,SAAUL,KAAKC,MAAMK,QAChD,2BACEC,KAAK,OACLC,GAAG,QACHC,KAAO,WACPC,SAAU,SAACC,GAAD,OAAO,EAAKV,MAAMW,OAAOD,MAErC,4BAAQH,GAAG,OAAX,a,GAX2BL,aCAlBU,E,uKAEjB,OACE,6BACE,kBAAC,EAAD,CAAOP,OAAQN,KAAKC,MAAMK,OAAQM,OAAQZ,KAAKC,MAAMW,SACpDZ,KAAKC,MAAMa,KAAKC,KAAI,SAACC,EAASC,GAAV,OACnB,wBAAIT,GAAIS,EAAOC,IAAKD,GACjBD,EAAQG,c,GAPahB,aCsDnBiB,E,4MAlDbC,aAAe,SAACV,GACdA,EAAEW,sBAC0BC,IAAxB,EAAKC,MAAMC,UAAkD,KAAxB,EAAKD,MAAMC,WAClD,EAAKC,SACH,CACEC,KAAK,GAAD,mBACC,EAAKH,MAAMG,MADZ,CAEF,CACER,KAAM,EAAKK,MAAMC,SACjBG,UAAU,EACVC,KAAM,IAAIC,QAGdL,SAAU,KAEZ,kBAAMM,aAAaC,QAAQ,OAAQC,KAAKC,UAAU,EAAKV,MAAMG,UAG/DhB,EAAEd,OAAOsC,WAAW,GAAGC,MAAQ,K,EAInCC,YAAc,SAAC1B,GACb,EAAKe,SAAL,eAAiBf,EAAEd,OAAOY,KAAOE,EAAEd,OAAOuC,S,EAG5CE,cAAgB,WACd,EAAKZ,SAAS,CAACC,KAAO,KACtBI,aAAaQ,WAAW,S,EAI1Bf,MAAQ,CACNG,KAAMM,KAAKO,MAAMT,aAAaU,QAAQ,UAAY,I,uDAIlD,OACE,yBAAKhD,UAAU,OACb,kBAAC,EAAD,CAAQS,OAAQF,KAAKsC,gBACrB,kBAAC,EAAD,CACExB,KAAMd,KAAKwB,MAAMG,KACjBrB,OAAQN,KAAKqB,aACbT,OAAQZ,KAAKqC,mB,GA5CLlC,aCOEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.33028f65.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport logo from '../../logo.svg';\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Hello <code>React</code>.\r\n        </p>\r\n        <p\r\n          className=\"App-link\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          onClick={this.props.remove}\r\n        >\r\n          Delete List\r\n        </p>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class TodoInput extends Component {\r\n  render() {\r\n     return (\r\n      <div className=\"wrap\">\r\n          <form className=\"input-wrap\" onSubmit={this.props.submit}>\r\n            <input\r\n              type=\"text\"\r\n              id=\"input\"\r\n              name = \"todoitem\"\r\n              onChange={(e) => this.props.handle(e)}\r\n            />\r\n            <button id=\"add\">Add</button>\r\n          </form>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Input from './TodoInput';\r\nexport default class Todo extends Component {\r\n   render() {\r\n    return (\r\n      <div>\r\n        <Input submit={this.props.submit} handle={this.props.handle}/>\r\n        {this.props.data.map((element, index) => (\r\n          <li id={index} key={index}>\r\n            {element.text}\r\n          </li>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Component/Header\";\nimport Todo from \"./Component/Todo/Todo\";\n\nclass App extends Component {\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (this.state.todoitem !== undefined && this.state.todoitem !== \"\") {\n      this.setState(\n        {\n          todo: [\n            ...this.state.todo,\n            {\n              text: this.state.todoitem,\n              complete: false,\n              date: new Date(),\n            },\n          ],\n          todoitem: \"\",\n        },\n        () => localStorage.setItem(\"data\", JSON.stringify(this.state.todo))\n      );\n\n      e.target.childNodes[0].value = \"\";\n    }\n  };\n\n  handleInput = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  removeStorage = () => {\n    this.setState({todo : []})\n    localStorage.removeItem(\"data\")\n    \n  }\n\n  state = {\n    todo: JSON.parse(localStorage.getItem(\"data\")) || [],\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header remove={this.removeStorage}/>\n        <Todo\n          data={this.state.todo}\n          submit={this.handleSubmit}\n          handle={this.handleInput}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}