{"version":3,"sources":["logo.svg","Component/Header/index.jsx","Component/Todo/TodoInput.jsx","Component/Todo/TodoItem.js","Component/Todo/Todo.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","Header","className","src","logo","alt","target","rel","onClick","this","props","remove","Component","TodoInput","onSubmit","submit","type","id","name","onChange","e","handle","TodoItem","index","completeTodo","editTodo","data","text","complete","date","edit","toString","Date","removeTodo","role","aria-label","Todo","console","log","parentNode","childNodes","condition","map","element","key","App","state","todo","JSON","parse","localStorage","getItem","handleSubmit","preventDefault","undefined","textBaru","setState","setItem","stringify","value","handleInput","removeStorage","removeItem","completeTask","done","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cb10be15.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport logo from '../../logo.svg';\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Hello <code>React</code>.\r\n        </p>\r\n        <p\r\n          className=\"App-link\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          onClick={this.props.remove}\r\n        >\r\n          Delete List\r\n        </p>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class TodoInput extends Component {\r\n  render() {\r\n     return (\r\n      <div className=\"wrap\">\r\n          <form className=\"input-wrap\" onSubmit={this.props.submit}>\r\n            <input\r\n              type=\"text\"\r\n              id=\"input\"\r\n              name = \"todoitem\"\r\n              onChange={(e) => this.props.handle(e)}\r\n            />\r\n            <button id=\"add\">Add</button>\r\n          </form>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class TodoItem extends Component {\r\n  //index={index+1} data={element} click={this.props.complete(index)} delete={this.props.delete} edit={this.props.edit}\r\n  \r\n  render() {\r\n    const {index,completeTodo,editTodo} = this.props\r\n    const {text,complete,date,edit} = this.props.data\r\n    return (\r\n      <>\r\n         <span>{index}. {text} | {complete.toString()} | {new Date(date).toString()}</span>\r\n            <button onClick={this.props.removeTodo}><span role=\"img\" aria-label=\"delete\">üóëÔ∏è</span></button>\r\n            <button onClick={editTodo}><span role=\"img\" aria-label=\"edit\">‚úèÔ∏è</span></button>\r\n            <button onClick={completeTodo}>{complete ? <span role=\"img\" aria-label=\"uncomplete\">‚ùå</span> : <span role=\"img\" aria-label=\"complete\">‚úîÔ∏è</span>}</button>\r\n      </>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Input from \"./TodoInput\";\r\nimport TodoItem from \"./TodoItem\";\r\nexport default class Todo extends Component {\r\n  // state = {\r\n  //   data : \"\"\r\n  // }\r\n\r\n  edit = (e) => {\r\n    console.log(e.target.parentNode.childNodes[2].data);\r\n    // let props = this.props.done(e)\r\n    // let id = (e.target.parentNode.id)\r\n    // console.log( e.target.parentNode)\r\n    // e.target.parentNode.innerHTML = <Input/>\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Input\r\n          submit={this.props.submit}\r\n          handle={this.props.handle}\r\n          condition={this.props.condition}\r\n        />\r\n        {this.props.data.map((element, index) => (\r\n          <li id={index} key={index}>\r\n            {element.edit ? (\r\n              <Input />\r\n            ) : (\r\n              <TodoItem\r\n                index={index + 1}\r\n                data={element}\r\n                completeTodo={this.props.complete(index)}\r\n                removeTodo={this.props.remove}\r\n                editTodo={this.props.edit}\r\n              />\r\n            )}\r\n            <button onClick={this.props.remove}></button>\r\n            {/* {index + 1}. {element.text} | {element.complete.toString()} | {new Date(element.date).toString()}\r\n            <button onClick={this.props.remove}><span role=\"img\" aria-label=\"delete\">üóëÔ∏è</span></button>\r\n            <button onClick={this.props.editTodo}><span role=\"img\" aria-label=\"edit\">‚úèÔ∏è</span></button>\r\n            <button onClick={() => this.props.complete(index)}>{element.complete ? <span role=\"img\" aria-label=\"uncomplete\">‚ùå</span> : <span role=\"img\" aria-label=\"complete\">‚úîÔ∏è</span>}</button> */}\r\n          </li>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./Component/Header\";\r\nimport Todo from \"./Component/Todo/Todo\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    todo: JSON.parse(localStorage.getItem(\"data\")) || [],\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.textBaru !== undefined && this.state.textBaru !== \"\") {\r\n      if(this.state.edit) {\r\n        this.setState({    \r\n        })\r\n      }else {\r\n          this.setState(\r\n            {\r\n              todo: [\r\n                ...this.state.todo,\r\n                {\r\n                  text: this.state.textBaru,\r\n                  complete: false,\r\n                  edit : false,\r\n                  date: new Date(),\r\n                },\r\n              ],\r\n              textBaru: \"\",\r\n            },\r\n            () => localStorage.setItem(\"data\", JSON.stringify(this.state.todo))\r\n          );\r\n            \r\n          e.target.childNodes[0].value = \"\";\r\n        }\r\n      }\r\n  };\r\n\r\n  handleInput = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  removeStorage = () => {\r\n    this.setState({ todo: [] });\r\n    localStorage.removeItem(\"data\");\r\n  };\r\n\r\n  remove = (index) => {\r\n    console.log(index)\r\n    // let data = this.state.todo;\r\n    // data.splice(index.target.parentNode.id, 1);\r\n    // this.setState(\r\n    //   {\r\n    //     todo: data,\r\n    //   },\r\n    //   () => localStorage.setItem(\"data\", JSON.stringify(this.state.todo))\r\n    // );\r\n  }\r\n\r\n  done(e){\r\n    console.log(\"THIS IS AFTER\")\r\n    console.log(e)\r\n    // if (event.which == 13) { // event which 13 adalah tombol enter\r\n    //     this.data[index].text = event.target.value; // ini untuk mengisi key text pada  objek todo di index yang dituju\r\n    //     this.storage('todo', this.data, true); // menyimpan data pada local storage dengan fungsi storage \r\n    //     this.show(); // menampilkan ulang data\r\n    // }\r\n  }\r\n\r\n  editTodo = (index) => {\r\n    let data = this.state.todo;\r\n    data[index.target.parentNode.id].edit = data[index.target.parentNode.id].complete ? false : true;\r\n    this.setState(\r\n      {\r\n        todo: data,\r\n      },\r\n      () => {localStorage.setItem(\"data\", JSON.stringify(this.state.todo))\r\n    console.log(this.state.todo)}\r\n    );\r\n  }\r\n\r\n  completeTask = (index) => {\r\n    let data = this.state.todo;\r\n    // data[index.target.parentNode.id].complete = data[index.target.parentNode.id].complete ? false : true;\r\n    // console.log(data)\r\n    // this.setState(\r\n    //   {\r\n    //     todo: data,\r\n    //   },\r\n    //   () => localStorage.setItem(\"data\", JSON.stringify(this.state.todo))\r\n    // );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header remove={this.removeStorage} />\r\n        <Todo\r\n          condition={this.state.edit}\r\n          data={this.state.todo}\r\n          submit={this.handleSubmit}\r\n          handle={this.handleInput}\r\n          remove={this.remove}\r\n          complete={this.completeTask}\r\n          done={this.done}\r\n          editTodo = {this.editTodo}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}